{
    "questions": [
      {
        
        "difficulty": "easy",
        "question": "أي من اللغات التالية تُستخدم بشكل شائع لتطوير تطبيقات الويب الخلفية (Back-end)؟",
        "options": ["CSS", "JavaScript", "PHP", "HTML"],
        "answer": "PHP"
      },
      {
        
        "difficulty": "easy",
        "question": "ما هو العنصر الذي يُستخدم لتحديد متغير في Python؟",
        "options": ["var", "let", "const", "لا يوجد تعريف محدد للمتغيرات"],
        "answer": "لا يوجد تعريف محدد للمتغيرات"
      },
      {
        
        "difficulty": "easy",
        "question": "في JavaScript، ما هي النتيجة المتوقعة لـ `typeof null`؟",
        "options": ["null", "undefined", "object", "string"],
        "answer": "object"
      },
      {
        
        "difficulty": "easy",
        "question": "أي من هذه اللغات تُستخدم لتطوير تطبيقات سطح المكتب على نظام Windows؟",
        "options": ["Swift", "Kotlin", "C#", "Ruby"],
        "answer": "C#"
      },
      {
        
        "difficulty": "easy",
        "question": "أي من اللغات التالية تُعتبر لغة برمجة تفسيرية (Interpreted Language)؟",
        "options": ["C++", "Java", "Python", "Rust"],
        "answer": "Python"
      },
      {
        
        "difficulty": "easy",
        "question": "ما هي وظيفة الوسم `<title>` في HTML؟",
        "options": ["إضافة عنوان للصفحة يظهر في محرك البحث", "إضافة عنوان يظهر داخل الصفحة", "إنشاء عنوان رئيسي (Heading)", "تحديد نمط العنوان"],
        "answer": "إضافة عنوان للصفحة يظهر في محرك البحث"
      },
      {
        
        "difficulty": "easy",
        "question": "ما هي فائدة `console.log()` في JavaScript؟",
        "options": ["عرض بيانات في المتصفح", "طباعة بيانات في وحدة التحكم", "تنفيذ كود JavaScript", "إنشاء متغير جديد"],
        "answer": "طباعة بيانات في وحدة التحكم"
      },
      {
        
        "difficulty": "easy",
        "question": "أي من هذه اللغات تُستخدم لتنسيق صفحات الويب؟",
        "options": ["Java", "C++", "CSS", "Python"],
        "answer": "CSS"
      },
      {
        
        "difficulty": "easy",
        "question": "ما هي الوظيفة الأساسية لعلامة `<img>` في HTML؟",
        "options": ["إضافة صورة", "إضافة رابط", "إضافة نص", "إضافة فيديو"],
        "answer": "إضافة صورة"
      },
      {
        
        "difficulty": "easy",
        "question": "أي من هذه اللغات تُستخدم لإنشاء تطبيقات أندرويد؟",
        "options": ["Swift", "Kotlin", "C#", "Ruby"],
        "answer": "Kotlin"
      },
      {
        
        "difficulty": "easy",
        "question": "ما هو امتداد ملف JavaScript؟",
        "options": [".js", ".java", ".jsx", ".json"],
        "answer": ".js"
      },
      {
        
        "difficulty": "easy",
        "question": "أي من اللغات التالية تُستخدم لإنشاء قواعد البيانات؟",
        "options": ["SQL", "CSS", "HTML", "XML"],
        "answer": "SQL"
      },
      {
        
        "difficulty": "easy",
        "question": "ما هو العنصر المستخدم لإنشاء قائمة غير مرتبة في HTML؟",
        "options": ["<ul>", "<ol>", "<li>", "<dl>"] ,
        "answer": "<ul>"
      },
      {
        
        "difficulty": "easy",
        "question": "ما هي لغة البرمجة التي تُستخدم في تطوير تطبيقات iOS؟",
        "options": ["Swift", "Java", "Kotlin", "C#"],
        "answer": "Swift"
      },
      {
        
        "difficulty": "easy",
        "question": "أي من هذه اللغات تُعتبر لغة برمجة موجهة للكائنات؟",
        "options": ["Python", "C", "Assembly", "HTML"],
        "answer": "Python"
      },
      {
        "difficulty": "easy",
        "question": "ما هو الناتج عند تنفيذ `2 + \"2\"` في Java؟",
        "options": ["4", "22", "خطأ", "undefined"],
        "answer": "22"
      },      
      {
        
        "difficulty": "easy",
        "question": "أي من الخيارات التالية هو إطار عمل لتطوير تطبيقات الويب؟",
        "options": ["React", "Node.js", "Django", "جميع ما سبق"],
        "answer": "جميع ما سبق"
      },
      {
        
        "difficulty": "easy",
        "question": "ما هو البروتوكول المستخدم لنقل صفحات الويب؟",
        "options": ["FTP", "HTTP", "SMTP", "TCP"],
        "answer": "HTTP"
      },
      {
        
        "difficulty": "easy",
        "question": "ما هو الاختصار الخاص بـ CSS ؟",
        "options": ["Cascad Styling Sheets", "Cascad Styling Sheet", "Cascading Style Sheet", "Cascading Style Sheets"],
        "answer": "Cascading Style Sheets"
      },
      {
        
        "difficulty": "easy",
        "question": "ما هي الأداة التي تُستخدم لفحص كود HTML وCSS في المتصفح؟",
        "options": ["DevTools", "Console", "Debugger", "Terminal"],
        "answer": "DevTools"
      },
      {
        
        "difficulty": "medium",
        "question": "ما هي أهم الفروقات بين البرمجة الكائنية والبرمجة الإجرائية؟",
        "options": ["البرمجة الكائنية تستخدم الدوال فقط", "البرمجة الإجرائية تستخدم الكائنات", "البرمجة الكائنية تعتمد على الكائنات والتوريث", "البرمجة الإجرائية تعتمد على الكائنات"],
        "answer": "البرمجة الكائنية تعتمد على الكائنات والتوريث"
      },
      {
        
        "difficulty": "medium",
        "question": "ما هي وظيفة الـ `async` في JavaScript؟",
        "options": ["تحويل الدالة إلى دالة غير متزامنة", "تحويل الدالة إلى دالة متزامنة", "إلغاء تنفيذ الدالة", "تحديد نوع المتغير"],
        "answer": "تحويل الدالة إلى دالة غير متزامنة"
      },
      {
        
        "difficulty": "medium",
        "question": "في Node.js، ما هي الـ `callback`؟",
        "options": ["دالة تُنفذ بعد تنفيذ الدالة الأساسية", "دالة تُنفذ قبل الدالة الأساسية", "دالة تعيد قيمة إلى المتغيرات", "دالة تُستخدم لإنشاء الكائنات"],
        "answer": "دالة تُنفذ بعد تنفيذ الدالة الأساسية"
      },
      {
        "difficulty": "medium",
        "question": "ما هي الطرق المختلفة للتعامل مع الأخطاء في Java؟",
        "options": ["استخدام try-catch فقط", "استخدام throw فقط", "استخدام try-catch و throw و throws و finally", "استخدام try-catch و promises"],
        "answer": "استخدام try-catch و throw و throws و finally"
      },
      {
        
        "difficulty": "medium",
        "question": "ما هو الـ `Promise` في JavaScript؟",
        "options": ["كائن يُستخدم للتعامل مع العمليات غير المتزامنة", "دالة تُعيد نتيجة سابقة", "متغير يُستخدم لتخزين الدوال", "كائن يُستخدم لتخزين البيانات"],
        "answer": "كائن يُستخدم للتعامل مع العمليات غير المتزامنة"
      },
      {
        
        "difficulty": "medium",
        "question": "ما هو الفرق بين `localStorage` و `sessionStorage` في JavaScript؟",
        "options": ["`localStorage` يُخزن البيانات لفترة مؤقتة، و`sessionStorage` يُخزن البيانات بشكل دائم", "`sessionStorage` يُخزن البيانات فقط في نفس الجلسة بينما `localStorage` يُخزنها بشكل دائم", "`sessionStorage` يُخزن البيانات بشكل دائم، و`localStorage` يُخزن البيانات مؤقتاً", "لا يوجد فرق بينهما"],
        "answer": "`sessionStorage` يُخزن البيانات فقط في نفس الجلسة بينما `localStorage` يُخزنها بشكل دائم"
      },
      {
        
        "difficulty": "medium",
        "question": "ما هو المقصود بـ RESTful API؟",
        "options": ["واجهة تطبيقية تعتمد على XML فقط", "واجهة تطبيقية تعتمد على HTTP باستخدام طرق مختلفة", "واجهة تطبيقية تعتمد على RESTful فقط", "واجهة تطبيقية تعتمد على SOAP"],
        "answer": "واجهة تطبيقية تعتمد على HTTP باستخدام طرق مختلفة"
      },
      {
        
        "difficulty": "medium",
        "question": "أي من هذه الأطر (Frameworks) يُستخدم لتطوير تطبيقات الويب باستخدام JavaScript؟",
        "options": ["Django", "Flask", "React", "Ruby on Rails"],
        "answer": "React"
      },
      {
        
        "difficulty": "medium",
        "question": "ما هو الـ `hoisting` في JavaScript؟",
        "options": ["رفع المتغيرات والدوال في بداية البرنامج", "إزالة المتغيرات غير المستخدمة", "ترتيب البيانات في الذاكرة", "إعادة تعيين قيم المتغيرات"],
        "answer": "رفع المتغيرات والدوال في بداية البرنامج"
      },
      {
        
        "difficulty": "medium",
        "question": "ما هو الفرق بين الـ `==` والـ `===` في JavaScript؟",
        "options": ["الـ `==` يتحقق من القيمة فقط، بينما الـ `===` يتحقق من القيمة والنوع", "الـ `==` يتحقق من النوع فقط", "الـ `===` يتحقق من القيمة فقط", "لا يوجد فرق بينهما"],
        "answer": "الـ `==` يتحقق من القيمة فقط، بينما الـ `===` يتحقق من القيمة والنوع"
      },
      {
        
        "difficulty": "medium",
        "question": "ما هو الدور الأساسي للـ `Docker` في تطوير البرمجيات؟",
        "options": ["إنشاء بيئة لتشغيل التطبيقات وتوزيعها", "تخزين الكود المصدري", "تحسين أداء الخوادم", "إدارة قواعد البيانات"],
        "answer": "إنشاء بيئة لتشغيل التطبيقات وتوزيعها"
      },
      {
        
        "difficulty": "medium",
        "question": "ما هي الـ `MVC` في تطوير التطبيقات؟",
        "options": ["نمط تصميم يعتمد على الفصل بين البيانات والعرض والتحكم", "نمط تصميم يعتمد على تحليل البيانات", "نمط تصميم يعتمد على استخدام قواعد البيانات", "نمط تصميم يعتمد على واجهات المستخدم"],
        "answer": "نمط تصميم يعتمد على الفصل بين البيانات والعرض والتحكم"
      },
      {
        
        "difficulty": "medium",
        "question": "أي من هذه الأدوات يُستخدم لتحليل الكود البرمجي في JavaScript؟",
        "options": ["Node.js", "Jest", "Babel", "Webpack"],
        "answer": "Jest"
      },
      {
        
        "difficulty": "medium",
        "question": "ما هي وظيفة الـ `webpack` في بيئة JavaScript؟",
        "options": ["مجمّع (Bundler) للمصادر البرمجية", "محرر نصوص للكود البرمجي", "أداة لتوزيع التطبيقات", "أداة لاختبار الكود"],
        "answer": "مجمّع (Bundler) للمصادر البرمجية"
      },
      {
        
        "difficulty": "medium",
        "question": "أي من هذه الأدوات يُستخدم لبناء واجهات المستخدم في JavaScript؟",
        "options": ["React", "Django", "Angular", "Flask"],
        "answer": "React"
      },
        {
            
            "difficulty": "medium",
            "question": "ما هو الـ `DOM` في JavaScript؟",
            "options": ["واجهة برمجة التطبيقات", "نموذج الكائن الوثيق", "نموذج الكائن الوثيق المستند", "واجهة تطوير الويب"],
            "answer": "نموذج الكائن الوثيق المستند"
        },
        {
            
            "difficulty": "medium",
            "question": "ما هو الـ `AJAX` في JavaScript؟",
            "options": ["تقنية لتحميل الصفحات بشكل كامل", "تقنية لتحميل الصفحات بدون إعادة تحميل الصفحة", "تقنية لتحميل الصفحات بشكل جزئي", "تقنية لتحميل الصفحات بشكل متتالي"],
            "answer": "تقنية لتحميل الصفحات بدون إعادة تحميل الصفحة"
        },
        {
            
            "difficulty": "medium",
            "question": "ما هو الـ `Node.js`؟",
            "options": ["محرك JavaScript لتنفيذ الكود خارج المتصفح", "محرك JavaScript لتنفيذ الكود داخل المتصفح", "محرك JavaScript لتنفيذ الكود في الخوادم", "محرك JavaScript لتنفيذ الكود في الهواتف"],
            "answer": "محرك JavaScript لتنفيذ الكود في الخوادم"
        },
        {
            
            "difficulty": "medium",
            "question": "ما هو الـ `React Native`؟",    
            "options": ["محرك JavaScript لتنفيذ التطبيقات الهاتفية",
            "مكتبة JavaScript لبناء واجهات المستخدم",
            "مكتبة JavaScript لتنفيذ الكود في الخوادم",
            "محرك JavaScript لتنفيذ الكود داخل المتصفح"],
            "answer": "محرك JavaScript لتنفيذ التطبيقات الهاتفية"
        },
        {
            
            "difficulty": "medium",
            "question": "ما هي وظيفة الـ `var` في JavaScript؟",
            "options": ["تعريف متغير بعمر قصير داخل الدالة", "تعريف متغير بعمر طويل في جميع أنحاء البرنامج", "تحديد نوع المتغير", "تعريف متغير ثابت"],
            "answer": "تعريف متغير بعمر طويل في جميع أنحاء البرنامج"
          },
          {
            
            "difficulty": "medium",
            "question": "ما هو المقصود بـ `closure` في JavaScript؟",
            "options": ["دالة يمكنها الوصول إلى متغيرات من دالة خارجية", "دالة تعيد قيمة المتغير", "دالة لا تحتوي على أي متغيرات", "دالة يتم تنفيذها فقط في نهاية البرنامج"],
            "answer": "دالة يمكنها الوصول إلى متغيرات من دالة خارجية"
          },
          {
            
            "difficulty": "medium",
            "question": "ما هي وظيفة الـ `async/await` في JavaScript؟",
            "options": ["تنفيذ العمليات المتزامنة", "إدارة الأخطاء", "التعامل مع العمليات غير المتزامنة بشكل أسهل", "تنفيذ العمليات داخل الـ callback"],
            "answer": "التعامل مع العمليات غير المتزامنة بشكل أسهل"
          },
          {
            
            "difficulty": "medium",
            "question": "ما هو المقصود بـ `throttling` و `debouncing` في JavaScript؟",
            "options": ["تحديد حجم الذاكرة", "تحسين أداء واجهات المستخدم", "تقليل استهلاك الشبكة", "تقنيات للتحكم في معدل استجابة الدوال في الأحداث"],
            "answer": "تقنيات للتحكم في معدل استجابة الدوال في الأحداث"
          },
          {
            
            "difficulty": "medium",
            "question": "في React، ما هي وظيفة الـ `useState`؟",
            "options": ["إدارة الحالة المحلية للمكون", "تنفيذ الدوال غير المتزامنة", "إعادة ترتيب العناصر", "تحديد البيانات الأولية"],
            "answer": "إدارة الحالة المحلية للمكون"
          },
          {
            
            "difficulty": "medium",
            "question": "ما هو الفرق بين الـ `GET` والـ `POST` في HTTP؟",
            "options": ["الـ `GET` تُرسل البيانات في العنوان، والـ `POST` تُرسل البيانات في الجسم", "الـ `POST` تُرسل البيانات في العنوان، والـ `GET` تُرسلها في الجسم", "الـ `GET` يستخدم لجلب البيانات فقط, بينما الـ `POST` للتعديل", "الـ `GET` و الـ `POST` يقومان بنفس الوظيفة"],
            "answer": "الـ `GET` تُرسل البيانات في العنوان، والـ `POST` تُرسل البيانات في الجسم"
          },
          {
            
            "difficulty": "medium",
            "question": "ما هو الفرق بين الـ `map` والـ `forEach` في JavaScript؟",
            "options": ["الـ `map` يُعيد مصفوفة جديدة بينما الـ `forEach` لا يُعيد شيئًا", "الـ `map` يُنفذ الدالة فقط مرة واحدة", "الـ `forEach` يُعيد مصفوفة جديدة بينما الـ `map` لا يُعيد شيئًا", "الـ `map` و الـ `forEach` يؤديان نفس الغرض"],
            "answer": "الـ `map` يُعيد مصفوفة جديدة بينما الـ `forEach` لا يُعيد شيئًا"
          },
          {
            
            "difficulty": "medium",
            "question": "ما هو مفهوم الـ `event delegation` في JavaScript؟",
            "options": ["التعامل مع الأحداث على العناصر الفرعية بدلاً من العناصر الأم", "استخدام الأحداث في JavaScript بشكل موازٍ", "إلغاء تنفيذ الأحداث", "إدارة الأحداث المتزامنة"],
            "answer": "التعامل مع الأحداث على العناصر الفرعية بدلاً من العناصر الأم"
          },
          {
            
            "difficulty": "medium",
            "question": "ما هي وظيفة الـ `bind` في JavaScript؟",
            "options": ["تحديد نطاق دالة جديدة", "تنفيذ دالة عند استدعائها", "إعادة تعريف الدالة", "ربط الدالة بسياق معين"],
            "answer": "ربط الدالة بسياق معين"
          },
          {
            
            "difficulty": "medium",
            "question": "ما هو الهدف من استخدام الـ `webpack` في تطوير تطبيقات الويب؟",
            "options": ["تجميع وتحسين الأكواد البرمجية", "تنظيم قواعد البيانات", "تحسين تصميم الواجهة", "إدارة ملفات الصور"],
            "answer": "تجميع وتحسين الأكواد البرمجية"
        },
        {
            
            "difficulty": "hard",
            "question": "ما هي الفائدة من استخدام الـ `WeakMap` في JavaScript؟",
            "options": ["تخزين بيانات بشكل مؤقت دون زيادة حجم الذاكرة", "تخزين بيانات مرتبطة بالكائنات مع إلغاء التأثير على جمع القمامة", "تخزين بيانات بأمان في تطبيقات الويب", "تخزين الكائنات بشكل دائم"],
            "answer": "تخزين بيانات مرتبطة بالكائنات مع إلغاء التأثير على جمع القمامة"
          },
          {
            
            "difficulty": "hard",
            "question": "ما هو الفرق بين الـ `this` في دوال الأسهم (`arrow functions`) والدوال التقليدية في JavaScript؟",
            "options": ["لا يوجد فرق، `this` في كلا النوعين يشير إلى نفس الكائن", "في دوال الأسهم، `this` يشير إلى الكائن الذي يتم استدعاؤه منه، بينما في الدوال التقليدية يشير إلى الكائن الحالي", "في دوال الأسهم، `this` لا يتم تحديده، بينما في الدوال التقليدية يشير إلى الكائن الذي تم استدعاؤه منه", "في دوال الأسهم، `this` يشير إلى الكائن الحالي، بينما في الدوال التقليدية يشير إلى الكائن الذي تم استدعاؤه منه"],
            "answer": "في دوال الأسهم، `this` لا يتم تحديده، بينما في الدوال التقليدية يشير إلى الكائن الذي تم استدعاؤه منه"
          },
          {
            
            "difficulty": "hard",
            "question": "ما هي دالة `reduce` في JavaScript وما هي فائدتها؟",
            "options": ["تُستخدم لتكرار العناصر وتطبيق دالة معينة على كل عنصر", "تُستخدم لتصفية العناصر في مصفوفة وفقًا لشرط معين", "تُستخدم لتجميع العناصر في مصفوفة واحدة بناءً على دالة معينة", "تُستخدم لإرجاع عدد العناصر في مصفوفة"],
            "answer": "تُستخدم لتجميع العناصر في مصفوفة واحدة بناءً على دالة معينة"
          },
          {
            
            "difficulty": "hard",
            "question": "ما هي فكرة الـ `Proxy` في JavaScript وكيف يمكن استخدامها؟",
            "options": ["تسمح بإنشاء كائنات وهمية تقوم بتغيير سلوك الكائنات الأصلية", "تسمح بإنشاء كائنات ثابتة لا يمكن تعديلها", "تسمح بإنشاء دوال غير متزامنة تعمل بشكل مستقل", "تسمح بتخزين البيانات بشكل مؤقت"],
            "answer": "تسمح بإنشاء كائنات وهمية تقوم بتغيير سلوك الكائنات الأصلية"
          },
          {
            
            "difficulty": "hard",
            "question": "ما هو مفهوم الـ `debouncing` في JavaScript؟",
            "options": ["تنفيذ دالة بشكل متسلسل بعد مرور فترة زمنية معينة", "منع تكرار تنفيذ الدالة بشكل مستمر أثناء الكتابة أو التفاعل", "إيقاف تنفيذ الدالة بعد مرور فترة زمنية معينة", "تنفيذ الدالة بشكل متوازي"],
            "answer": "منع تكرار تنفيذ الدالة بشكل مستمر أثناء الكتابة أو التفاعل"
          },
          {
            
            "difficulty": "hard",
            "question": "ما هو مفهوم الـ `memoization` في البرمجة؟",
            "options": ["التخزين المؤقت للنتائج لتقليل الحسابات المتكررة", "تنفيذ الحسابات في وقت لاحق", "تنفيذ الدوال بشكل موازٍ", "تخزين المتغيرات بشكل دائم"],
            "answer": "التخزين المؤقت للنتائج لتقليل الحسابات المتكررة"
          },
          {
            
            "difficulty": "hard",
            "question": "ما هي `callback hell` وكيف يمكن تجنبها في JavaScript؟",
            "options": ["هي حدوث فوضى في الشيفرة بسبب دوال متداخلة، ويمكن تجنبها باستخدام الـ `async/await`", "هي مشكلة تحدث بسبب استدعاء الدوال بشكل موازٍ، ويمكن تجنبها باستخدام الـ `Promise`", "هي مشكلة تتعلق بمؤشرات الذاكرة، ويمكن تجنبها باستخدام الـ `var` بدلاً من الـ `let`", "هي مشكلة تحدث بسبب دوال غير متزامنة، ويمكن تجنبها باستخدام الـ `defer`"],
            "answer": "هي حدوث فوضى في الشيفرة بسبب دوال متداخلة، ويمكن تجنبها باستخدام الـ `async/await`"
          },
          {
            
            "difficulty": "hard",
            "question": "ما هو الفرق بين الـ `let` والـ `const` في JavaScript؟",
            "options": ["الـ `let` يسمح بتغيير قيمة المتغير بينما الـ `const` لا يسمح بذلك", "الـ `const` يسمح بتغيير قيمة المتغير بينما الـ `let` لا يسمح بذلك", "لا يوجد فرق بينهما", "الـ `let` يستخدم داخل الدوال بينما الـ `const` يستخدم خارج الدوال"],
            "answer": "الـ `let` يسمح بتغيير قيمة المتغير بينما الـ `const` لا يسمح بذلك"
          },
          {
            
            "difficulty": "hard",
            "question": "ما هو الفرق بين الـ `null` والـ `undefined` في JavaScript؟",
            "options": ["الـ `null` قيمة فارغة صريحة، بينما الـ `undefined` تعني أن المتغير غير مُعرف", "الـ `null` يشير إلى كائن فارغ، بينما الـ `undefined` يشير إلى قيمة مفقودة", "الـ `null` يستخدم فقط مع الكائنات، بينما الـ `undefined` يستخدم مع الأعداد", "الـ `null` و الـ `undefined` هما نفس الشيء"],
            "answer": "الـ `null` قيمة فارغة صريحة، بينما الـ `undefined` تعني أن المتغير غير مُعرف"
          },
          {
            
            "difficulty": "hard",
            "question": "ما هو الـ `closure` في JavaScript؟",
            "options": ["دالة يمكنها الوصول إلى المتغيرات من دالة خارجية حتى بعد انتهاء تنفيذها", "دالة مدمجة في JavaScript تسمح بتحديد نوع البيانات", "دالة تلتقط كل البيانات في الذاكرة", "دالة تقوم بإعادة قيمة معينة"],
            "answer": "دالة يمكنها الوصول إلى المتغيرات من دالة خارجية حتى بعد انتهاء تنفيذها"
          },
          {
            
            "difficulty": "hard",
            "question": "ما هو الـ `Event Loop` في JavaScript؟",
            "options": ["عملية تحدد ترتيب تنفيذ الأكواد غير المتزامنة", "وظيفة متكاملة مع الـ `Web Workers` لتنفيذ العمليات في الخلفية", "آلية لتنفيذ الأكواد بشكل متوازي", "عملية لترتيب الأحداث بشكل عشوائي"],
            "answer": "عملية تحدد ترتيب تنفيذ الأكواد غير المتزامنة"
          },
          {
            
            "difficulty": "hard",
            "question": "ما هي الفرق بين الـ `shallow copy` و الـ `deep copy` في JavaScript؟",
            "options": ["الـ `shallow copy` يُنسخ الكائن على مستوى السطح، بينما الـ `deep copy` يُنسخ الكائن بشكل كامل مع جميع الكائنات الفرعية", "الـ `shallow copy` يُنسخ الكائن بشكل كامل، بينما الـ `deep copy` يُنسخ الكائن على مستوى السطح", "الـ `shallow copy` يتعلق بالكائنات البدائية، بينما الـ `deep copy` للكائنات المركبة", "لا يوجد فرق بينهما"],
            "answer": "الـ `shallow copy` يُنسخ الكائن على مستوى السطح، بينما الـ `deep copy` يُنسخ الكائن بشكل كامل مع جميع الكائنات الفرعية"
          },
          {
            
            "difficulty": "hard",
            "question": "كيف يمكن التعامل مع الـ `race condition` في البرمجة المتوازية؟",
            "options": ["باستخدام الأقفال (locks) أو الـ `mutexes` لضمان الوصول الحصري للموارد", "باستخدام الدوال غير المتزامنة", "باستخدام المتغيرات العالمية", "باستخدام الـ `async/await`"],
            "answer": "باستخدام الأقفال (locks) أو الـ `mutexes` لضمان الوصول الحصري للموارد"
          },
          {
            
            "difficulty": "hard",
            "question": "ما هو الفرق بين الـ `SQL JOIN` و الـ `UNION`؟",
            "options": ["الـ `JOIN` يستخدم لدمج بيانات من جداول مختلفة بناءً على علاقة، بينما الـ `UNION` يستخدم لدمج نتائج استعلامات مختلفة في صف واحد", "الـ `JOIN` يدمج نتائج من نفس الجدول، بينما الـ `UNION` يدمج بيانات من عدة قواعد بيانات", "الـ `JOIN` يدمج بيانات صفية، بينما الـ `UNION` يدمج بيانات عمودية", "الـ `JOIN` و الـ `UNION` نفس الشيء"],
            "answer": "الـ `JOIN` يستخدم لدمج بيانات من جداول مختلفة بناءً على علاقة، بينما الـ `UNION` يستخدم لدمج نتائج استعلامات مختلفة في صف واحد"
          },
          {
            
            "difficulty": "hard",
            "question": "ما هي الطرق الممكنة لتحسين أداء تطبيقات الويب باستخدام الـ `caching`؟",
            "options": ["استخدام الـ `localStorage` و الـ `sessionStorage` لتخزين البيانات", "استخدام التخزين المؤقت للصور والملفات الثابتة", "استخدام شبكات توزيع المحتوى (CDN) لتوزيع البيانات", "جميع ما ذكر"],
            "answer": "جميع ما ذكر"
          }
    ]
  }
  